module.exports = {
	AssignmentExpression: ['left', 'right'],
	ArrayExpression: ['elements'],
	ArrayPattern: ['elements'],
	ArrowFunctionExpression: ['params', 'defaults', 'rest', 'body'],
	BlockStatement: ['body'],
	BinaryExpression: ['left', 'right'],
	BreakStatement: ['label'],
	CallExpression: ['callee', 'arguments'],
	CatchClause: ['param', 'body'],
	ClassBody: ['body'],
	ClassDeclaration: ['id', 'body', 'superClass'],
	ClassExpression: ['id', 'body', 'superClass'],
	ConditionalExpression: ['test', 'consequent', 'alternate'],
	ContinueStatement: ['label'],
	DebuggerStatement: [],
	DirectiveStatement: [],
	DoWhileStatement: ['body', 'test'],
	EmptyStatement: [],
	ExpressionStatement: ['expression'],
	ForStatement: ['init', 'test', 'update', 'body'],
	ForInStatement: ['left', 'right', 'body'],
	ForOfStatement: ['left', 'right', 'body'],
	FunctionDeclaration: ['id', 'params', 'defaults', 'rest', 'body'],
	FunctionExpression: ['id', 'params', 'defaults', 'rest', 'body'],
	Identifier: [],
	IfStatement: ['test', 'consequent', 'alternate'],
	Literal: [],
	LabeledStatement: ['label', 'body'],
	LogicalExpression: ['left', 'right'],
	MemberExpression: ['object', 'property'],
	MethodDefinition: ['key', 'value'],
	NewExpression: ['callee', 'arguments'],
	ObjectExpression: ['properties'],
	ObjectPattern: ['properties'],
	Program: ['body'],
	Property: ['key', 'value'],
	ReturnStatement: ['argument'],
	SequenceExpression: ['expressions'],
	SwitchStatement: ['discriminant', 'cases'],
	SwitchCase: ['test', 'consequent'],
	ThisExpression: [],
	ThrowStatement: ['argument'],
	TryStatement: ['block', 'handlers', 'handler', 'guardedHandlers', 'finalizer'],
	UnaryExpression: ['argument'],
	UpdateExpression: ['argument'],
	VariableDeclaration: ['declarations'],
	VariableDeclarator: ['id', 'init'],
	WhileStatement: ['test', 'body'],
	WithStatement: ['object', 'body'],
	YieldExpression: ['argument']
};
